"""
Test script for the enhanced storage service.

Run this to verify both local and cloud storage modes work correctly.
"""

import asyncio
import os
import sys
from datetime import datetime

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.enhanced_storage_service import StorageService, is_running_in_cloud


async def test_storage_service():
    """Test the storage service functionality."""
    print("=" * 60)
    print("Testing Enhanced Storage Service")
    print("=" * 60)
    
    # Check environment
    print(f"\nEnvironment: {'CLOUD' if is_running_in_cloud() else 'LOCAL'}")
    print(f"Running in cloud: {is_running_in_cloud()}")
    
    # Initialize storage service
    try:
        storage = StorageService()
        print("✓ Storage service initialized successfully")
    except Exception as e:
        print(f"✗ Failed to initialize storage service: {e}")
        return
    
    # Test report operations
    test_content = f"""# Test Report

Generated at: {datetime.now().isoformat()}

## Summary
This is a test report to verify the storage service functionality.

## Content
- Item 1: Testing local/cloud storage
- Item 2: Verifying save/load operations
- Item 3: Checking URL generation

---
*Generated by storage service test*
"""
    
    # Test 1: Save a markdown report
    print("\n1. Testing save_report (markdown)...")
    try:
        filename_base = f"test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        report_path = await storage.save_report(
            content=test_content,
            filename=filename_base,
            format='md'
        )
        print(f"✓ Saved markdown report: {report_path}")
        saved_filename = os.path.basename(report_path)
    except Exception as e:
        print(f"✗ Failed to save markdown report: {e}")
        saved_filename = None
    
    # Test 2: Save a JSON report
    print("\n2. Testing save_report (JSON)...")
    try:
        json_content = """{
    "title": "Test JSON Report",
    "timestamp": "%s",
    "data": {
        "test": true,
        "items": [1, 2, 3]
    }
}""" % datetime.now().isoformat()
        
        json_path = await storage.save_report(
            content=json_content,
            filename=filename_base,
            format='json'
        )
        print(f"✓ Saved JSON report: {json_path}")
    except Exception as e:
        print(f"✗ Failed to save JSON report: {e}")
    
    # Test 3: List reports
    print("\n3. Testing list_reports...")
    try:
        all_reports = await storage.list_reports()
        print(f"✓ Found {len(all_reports)} total reports")
        
        md_reports = await storage.list_reports(format='md')
        print(f"✓ Found {len(md_reports)} markdown reports")
        
        if all_reports:
            print("\nMost recent report:")
            latest = all_reports[0]
            print(f"  - Filename: {latest['filename']}")
            print(f"  - Size: {latest.get('size_human', f'{latest["size"]} bytes')}")
            print(f"  - Modified: {latest['modified']}")
            print(f"  - URL: {latest['url']}")
    except Exception as e:
        print(f"✗ Failed to list reports: {e}")
    
    # Test 4: Get report content
    if saved_filename:
        print("\n4. Testing get_report...")
        try:
            content = await storage.get_report(saved_filename)
            print(f"✓ Retrieved report content ({len(content)} chars)")
            print(f"  First 100 chars: {content[:100]}...")
        except Exception as e:
            print(f"✗ Failed to get report: {e}")
    
    # Test 5: Get report URL
    if saved_filename:
        print("\n5. Testing get_report_url...")
        try:
            # Test unsigned URL
            url = storage.get_report_url(saved_filename, signed=False)
            print(f"✓ Public URL: {url}")
            
            # Test signed URL (only in cloud mode)
            if is_running_in_cloud():
                signed_url = storage.get_report_url(saved_filename, signed=True, expiry_hours=1)
                print(f"✓ Signed URL (1 hour): {signed_url[:80]}...")
        except Exception as e:
            print(f"✗ Failed to get report URL: {e}")
    
    # Test 6: Delete report
    if saved_filename:
        print("\n6. Testing delete_report...")
        try:
            success = await storage.delete_report(saved_filename)
            if success:
                print(f"✓ Deleted test report: {saved_filename}")
            else:
                print(f"✗ Failed to delete report (not found)")
        except Exception as e:
            print(f"✗ Failed to delete report: {e}")
    
    print("\n" + "=" * 60)
    print("Test completed!")
    print("=" * 60)


async def test_migration():
    """Test report migration functionality."""
    print("\n" + "=" * 60)
    print("Testing Report Migration")
    print("=" * 60)
    
    from core.enhanced_storage_service import migrate_existing_reports
    
    storage = StorageService()
    
    print("\nChecking for existing local reports...")
    local_reports_dir = os.path.expanduser("~/.gnosis-wraith/reports")
    
    if os.path.exists(local_reports_dir):
        report_count = len([f for f in os.listdir(local_reports_dir) 
                           if f.endswith(('.md', '.json', '.html'))])
        print(f"Found {report_count} reports in {local_reports_dir}")
        
        if report_count > 0:
            response = input("\nMigrate these reports to current storage? (y/N): ")
            if response.lower() == 'y':
                await migrate_existing_reports(storage)
            else:
                print("Migration skipped")
    else:
        print(f"No local reports directory found at {local_reports_dir}")


def main():
    """Main entry point."""
    # You can set these environment variables to test cloud mode
    # os.environ['RUNNING_IN_CLOUD'] = 'true'
    # os.environ['GCS_BUCKET_NAME'] = 'your-test-bucket'
    # os.environ['GOOGLE_CLOUD_PROJECT'] = 'your-project-id'
    
    # Run tests
    asyncio.run(test_storage_service())
    
    # Optionally test migration
    # asyncio.run(test_migration())


if __name__ == "__main__":
    main()
