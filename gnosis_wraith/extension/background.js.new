/**
 * Updated background.js for WebWraith Extension 
 * with job-based asynchronous processing support
 */

// Configuration
let isCapturing = false;
let fullPageCaptureInProgress = false;

// Convert data URL to blob for download
function dataUrlToBlob(dataUrl) {
  let byteString;
  if (dataUrl.split(',')[0].indexOf('base64') >= 0) {
    byteString = atob(dataUrl.split(',')[1]);
  } else {
    byteString = unescape(dataUrl.split(',')[1]);
  }
  
  // Separate out the mime component
  const mimeString = dataUrl.split(',')[0].split(':')[1].split(';')[0];
  
  // Write the bytes of the string to an ArrayBuffer
  const ia = new Uint8Array(byteString.length);
  for (let i = 0; i < byteString.length; i++) {
    ia[i] = byteString.charCodeAt(i);
  }
  
  return new Blob([ia], {type: mimeString});
}

// Switch to capture icon to indicate processing
const setCaptureIcon = async () => {
  try {
    await chrome.action.setIcon({path: {
      16: "images/cursor-32.png",
      32: "images/cursor-32.png",
      48: "images/cursor-48.png",
      128: "images/icon-128.png"
    }});
  } catch(err) {
    console.error("Failed to set capture icon:", err);
  }
};

// Switch back to normal icon
const setNormalIcon = async () => {
  try {
    await chrome.action.setIcon({path: {
      16: "images/icon-16.png",
      32: "images/icon-32.png",
      48: "images/icon-48.png",
      128: "images/icon-128.png"
    }});
  } catch(err) {
    console.error("Failed to set normal icon:", err);
  }
};

// Initialize server URL settings
async function initializeServerUrl() {
  try {
    // Get current server URL from storage
    const { serverUrl } = await chrome.storage.local.get(['serverUrl']);
    
    // If no server URL is set, initialize with default
    if (!serverUrl) {
      await chrome.storage.local.set({ serverUrl: 'http://localhost:5678' });
      console.log("Set default server URL: http://localhost:5678");
    } else {
      console.log(`Using existing server URL: ${serverUrl}`);
    }
  } catch (error) {
    console.error("Error initializing server URL:", error);
  }
}

// Create context menu items when extension is installed
chrome.runtime.onInstalled.addListener(() => {
  // Initialize server URL
  initializeServerUrl();
  
  // Context menu for links
  chrome.contextMenus.create({
    id: 'capture-link',
    title: 'Capture screenshot of this link',
    contexts: ['link']
  });
  
  // Context menu for pages
  chrome.contextMenus.create({
    id: 'capture-page',
    title: 'Capture screenshot of this page',
    contexts: ['page']
  });
  
  // New context menu item for manual screenshot
  chrome.contextMenus.create({
    id: 'take-screenshot',
    title: 'Take screenshot',
    contexts: ['page']
  });
});

// Handle context menu clicks
chrome.contextMenus.onClicked.addListener((info, tab) => {
  if (info.menuItemId === 'capture-link' && info.linkUrl) {
    captureUrl(info.linkUrl);
  } else if (info.menuItemId === 'capture-page' || info.menuItemId === 'take-screenshot') {
    captureAndDownload(tab);
  }
});

// Handle toolbar button clicks
chrome.action.onClicked.addListener((tab) => {
  captureAndDownload(tab);
});

// Listen for messages from popup or content scripts
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'captureUrl') {
    captureUrl(message.url, message.sendToApi);
    sendResponse({ status: 'capturing' });
    return true;
  }

  if (message.action === 'captureCurrentPage') {
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
      if (tabs && tabs[0]) {
        // If fullPage flag is true, try to handle the request directly
        if (message.fullPage === true) {
          // Just use the existing content script if possible
          try {
            chrome.tabs.sendMessage(tabs[0].id, { 
              action: 'requestFullPageCapture',
              sendToApi: message.sendToApi
            }, 
              response => {
                if (chrome.runtime.lastError || !response) {
                  console.log("Content script not accessible, injecting script");
                  // Fallback - inject minimal script that just triggers the capture
                  chrome.scripting.executeScript({
                    target: { tabId: tabs[0].id },
                    function: (sendToApi) => {
                      chrome.runtime.sendMessage({
                        action: 'startFullPageCapture',
                        dimensions: {
                          scrollHeight: Math.max(document.documentElement.scrollHeight, document.body.scrollHeight),
                          scrollWidth: Math.max(document.documentElement.scrollWidth, document.body.scrollWidth),
                          viewportHeight: window.innerHeight,
                          viewportWidth: window.innerWidth
                        },
                        sendToApi: sendToApi
                      });
                    },
                    args: [message.sendToApi]
                  }).catch(error => {
                    console.error("Could not inject script:", error);
                    captureAndProcess(tabs[0], message.sendToApi);
                  });
                }
              });
          } catch (e) {
            console.error("Error communicating with content script:", e);
            // Still try to capture the visible part
            captureAndProcess(tabs[0], message.sendToApi);
          }
        } else {
          captureAndProcess(tabs[0], message.sendToApi);
        }
        sendResponse({ status: 'processing' });
      }
    });
    return true;
  }

  // Handle other messages (omitted for brevity)...
  
  if (message.action === 'serverUrlUpdated') {
    // Handle server URL update from popup
    const serverUrl = message.serverUrl;
    console.log(`Server URL updated to: ${serverUrl}`);
    
    // Test connection to the server
    fetch(`${serverUrl}/api/ping`, { 
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    })
    .then(response => {
      if (response.ok) {
        console.log("Connection to server successful");
      } else {
        console.warn(`Connection to server failed with status: ${response.status}`);
      }
    })
    .catch(error => {
      console.error(`Failed to connect to server: ${error.message}`);
    });
    
    sendResponse({ status: 'server url updated' });
    return true;
  }
});

// Function to capture URL and navigate to it for screenshot
async function captureUrl(url, sendToApi = false) {
  try {
    // Create a new tab with the specified URL
    let processedUrl = url;
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      processedUrl = 'https://' + url;
    }
    
    const tab = await chrome.tabs.create({ url: processedUrl, active: true });
    
    // Wait for page to load
    // This is a simple approach - a more robust solution would listen for tab loading events
    setTimeout(() => {
      captureAndProcess(tab, sendToApi);
    }, 5000); // Wait 5 seconds for the page to load
  } catch (error) {
    console.error("Error capturing URL:", error);
  }
}

// Function to upload image to Wraith API server - UPDATED FOR JOB-BASED APPROACH
async function uploadImageToServer(dataUrl, tabInfo) {
  console.log("uploadImageToServer called with tabInfo:", JSON.stringify(tabInfo));
  try {
    // Get server URL from storage, default to localhost if not set
    let { serverUrl = 'http://localhost:5678' } = await chrome.storage.local.get(['serverUrl']);
    
    // Force the server URL to use the correct protocol, host and port
    if (!serverUrl.startsWith('http://')) {
      serverUrl = 'http://' + serverUrl;
    }
    
    // Ensure server URL ends without trailing slash
    serverUrl = serverUrl.replace(/\/$/, '');
    
    console.log(`Using server URL: ${serverUrl}`);
    
    // Use the new async endpoint
    const apiUrl = `${serverUrl}/api/upload-async`;
    
    // Convert dataUrl to Blob
    const blob = dataUrlToBlob(dataUrl);
    
    // Create FormData
    const formData = new FormData();
    formData.append('image', blob, 'screenshot.png');
    formData.append('title', `Screenshot of ${tabInfo.title || tabInfo.url}`);
    
    try {
      // Notify content script that upload is starting
      if (tabInfo.id) {
        chrome.tabs.sendMessage(tabInfo.id, { action: 'uploadStarted' });
      }
      
      // Use fetch with the new async endpoint
      const uploadResponse = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Origin': chrome.runtime.getURL('')
        },
        credentials: 'include',
        body: formData
      });
      
      if (!uploadResponse.ok) {
        throw new Error('Server error: ' + uploadResponse.status);
      }
      
      const jobData = await uploadResponse.json();
      
      if (!jobData.success || !jobData.job_id) {
        throw new Error('Invalid job response from server');
      }
      
      // Get the job ID from the response
      const jobId = jobData.job_id;
      console.log(`Received job ID: ${jobId}, starting polling`);
      
      // Notify content script that job has started
      if (tabInfo.id) {
        chrome.tabs.sendMessage(tabInfo.id, { 
          action: 'uploadJobStarted',
          jobId: jobId
        });
      }
      
      // Start polling for job status
      return await pollJobStatus(serverUrl, jobId, tabInfo);
      
    } catch (error) {
      // Notify content script of error
      if (tabInfo.id) {
        chrome.tabs.sendMessage(tabInfo.id, { 
          action: 'uploadError', 
          error: error.message || 'Connection error'
        });
      }
      throw error;
    }
  } catch (error) {
    console.error("Error uploading to server:", error);
    throw error;
  }
}

// New function to poll for job status
async function pollJobStatus(serverUrl, jobId, tabInfo, attempts = 0) {
  const MAX_ATTEMPTS = 30; // 2.5 minutes with 5-second interval
  const POLLING_INTERVAL = 5000; // 5 seconds
  
  if (attempts >= MAX_ATTEMPTS) {
    throw new Error('Job processing timed out');
  }
  
  try {
    // Construct the job status endpoint URL
    const statusUrl = `${serverUrl}/api/jobs/${jobId}`;
    console.log(`Polling job status (attempt ${attempts+1}/${MAX_ATTEMPTS}): ${statusUrl}`);
    
    // Fetch the job status
    const response = await fetch(statusUrl);
    
    if (!response.ok) {
      throw new Error(`Error checking job status: ${response.status}`);
    }
    
    const data = await response.json();
    
    // Update UI based on job status
    if (tabInfo.id) {
      chrome.tabs.sendMessage(tabInfo.id, { 
        action: 'uploadProgress',
        status: data.status,
        progress: calculateProgress(data.status, attempts)
      });
    }
    
    // Check job status
    if (data.status === 'completed') {
      console.log('Job completed successfully:', data);
      
      // Notify content script that upload is complete
      if (tabInfo.id) {
        // Get server base URL to construct report URL
        let reportUrl = `${serverUrl}/reports/${data.results.html_path}`;
        
        chrome.tabs.sendMessage(tabInfo.id, { 
          action: 'uploadFinished',
          reportUrl,
          extractedText: data.results.extracted_text
        });
      }
      
      return data;
    } else if (data.status === 'failed') {
      console.error('Job failed:', data.error);
      throw new Error(`Job processing failed: ${data.error || 'Unknown error'}`);
    } else {
      // Still processing, wait and try again
      console.log(`Job ${jobId} still processing (status: ${data.status}), waiting ${POLLING_INTERVAL/1000} seconds...`);
      
      // Wait for the polling interval
      await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL));
      
      // Try again with incremented attempt counter
      return await pollJobStatus(serverUrl, jobId, tabInfo, attempts + 1);
    }
  } catch (error) {
    console.error(`Error polling job status (attempt ${attempts+1}):`, error);
    
    // If we're not out of attempts, try again
    if (attempts < MAX_ATTEMPTS - 1) {
      // Wait for the polling interval
      await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL));
      
      // Try again with incremented attempt counter
      return await pollJobStatus(serverUrl, jobId, tabInfo, attempts + 1);
    } else {
      // Out of attempts, propagate the error
      throw error;
    }
  }
}

// Helper function to calculate progress based on status and attempts
function calculateProgress(status, attempts) {
  if (status === 'pending') {
    // 0-20% during pending phase
    return Math.min(20, attempts * 2);
  } else if (status === 'processing') {
    // 20-90% during processing phase
    return 20 + Math.min(70, attempts * 7);
  } else if (status === 'completed') {
    return 100;
  } else if (status === 'failed') {
    return 100; // Still show 100% even for failure
  } else {
    // Default case for unknown status
    return Math.min(90, 10 + attempts * 5);
  }
}

// Function to capture and process
async function captureAndProcess(tab, sendToApi = false) {
  // Prevent multiple captures at once
  if (isCapturing) return;
  isCapturing = true;
  
  try {
    // Change icon to indicate processing
    await setCaptureIcon();
    
    // Notify content script that capture is starting
    try {
      chrome.tabs.sendMessage(tab.id, { action: 'capturingStarted' });
    } catch (e) {
      // Content script might not be ready, continue anyway
      console.log("Could not notify content script:", e);
    }
    
    // Capture the visible tab
    chrome.tabs.captureVisibleTab({format: "png"}, async (dataUrl) => {
      if (!dataUrl || !dataUrl.length) {
        console.error("Failed to capture screenshot");
        await setNormalIcon();
        isCapturing = false;
        return;
      }
      
      try {
        if (sendToApi) {
          // Upload to server
          try {
            await uploadImageToServer(dataUrl, tab);
            // History is updated in the uploadImageToServer function
          } catch (uploadError) {
            console.error("Error uploading to server:", uploadError);
            // Still save locally as fallback
            const filename = generateFilename(tab.title || tab.url);
            chrome.downloads.download({
              url: dataUrl,
              filename: filename,
              saveAs: true
            });
          }
        } else {
          // Generate filename based on page title or URL
          const filename = generateFilename(tab.title || tab.url);
          
          // Download directly from the data URL
          chrome.downloads.download({
            url: dataUrl,
            filename: filename,
            saveAs: true
          });
        }
        
        // Save to history
        saveToHistory(tab.url, tab.title);
      } catch (error) {
        console.error("Error processing screenshot:", error);
        console.error(`Failed to process screenshot: ${error.message}`);
      } finally {
        // Notify content script that capture has finished
        try {
          chrome.tabs.sendMessage(tab.id, { 
            action: 'capturingFinished',
            sendToApi: sendToApi
          }, response => {
            console.log("Content script response to capturingFinished:", response);
          });
        } catch (e) {
          console.error("Could not notify content script:", e);
        }
        
        await setNormalIcon();
        isCapturing = false;
      }
    });
  } catch (error) {
    console.error("Error in capture process:", error);
    await setNormalIcon();
    isCapturing = false;
  }
}

// For backward compatibility - just calls the new function with download mode
async function captureAndDownload(tab) {
  return captureAndProcess(tab, false);
}

// Function to generate a clean filename
function generateFilename(source) {
  // Remove invalid characters, replace spaces with underscores
  const cleanName = source.replace(/[\\\/\:\*\?\"\<\>\|]/g, "").replace(/\s+/g, "_");
  // Truncate if too long
  const truncated = cleanName.substring(0, 50);
  // Add timestamp and extension
  const timestamp = new Date().toISOString().replace(/[-:]/g, "").replace("T", "_").split(".")[0];
  return `screenshot_${truncated}_${timestamp}.png`;
}

// Save URL to history
function saveToHistory(url, title = "") {
  const MAX_HISTORY = 20;
  
  chrome.storage.local.get(['history'], function(result) {
    let history = result.history || [];
    
    // Remove duplicates
    history = history.filter(item => item.url !== url);
    
    // Add to beginning
    history.unshift({
      url: url,
      title: title,
      timestamp: Date.now()
    });
    
    // Limit size
    if (history.length > MAX_HISTORY) {
      history = history.slice(0, MAX_HISTORY);
    }
    
    // Save
    chrome.storage.local.set({history: history});
  });
}
